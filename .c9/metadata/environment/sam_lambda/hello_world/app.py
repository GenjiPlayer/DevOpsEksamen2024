{"filter":false,"title":"app.py","tooltip":"/sam_lambda/hello_world/app.py","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["import json","","# import requests","","","def lambda_handler(event, context):","    \"\"\"Sample pure Lambda function","","    Parameters","    ----------","    event: dict, required","        API Gateway Lambda Proxy Input Format","","        Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format","","    context: object, required","        Lambda Context runtime methods and attributes","","        Context doc: https://docs.aws.amazon.com/lambda/latest/dg/python-context-object.html","","    Returns","    ------","    API Gateway Lambda Proxy Output Format: dict","","        Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html","    \"\"\"","","    # try:","    #     ip = requests.get(\"http://checkip.amazonaws.com/\")","    # except requests.RequestException as e:","    #     # Send some context about this error to Lambda Logs","    #     print(e)","","    #     raise e","","    return {","        \"statusCode\": 200,","        \"body\": json.dumps({","            \"message\": \"hello world\",","            # \"location\": ip.text.replace(\"\\n\", \"\")","        }),","    }",""],"id":44}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":9},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","","bucket = os.environ['BUCKET']","bedrockclient = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    model_id = \"amazon.titan-image-generator-v1\"","","    body = json.loads(event[\"body\"])","    prompt = body.get(\"prompt\")","    seed= random.randint(0,2147483647)","    s3_image_path = f\"58/titan{seed}.png\"","","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    try:","        response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"raaaah >:(\",","                \"error\": str(e)","            })","        }"],"id":45}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":9},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","","bucket = os.environ['BUCKET']","bedrockclient = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    model_id = \"amazon.titan-image-generator-v1\"","","    body = json.loads(event[\"body\"])","    prompt = body.get(\"prompt\")","    seed= random.randint(0,2147483647)","    s3_image_path = f\"58/titan{seed}.png\"","","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    try:","        response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"raaaah >:(\",","                \"error\": str(e)","            })","        }"],"id":46},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","import logging","","# Setup logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","bucket = os.environ['BUCKET']","bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")  # Ensure consistency here","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    logger.info(\"Received event: %s\", json.dumps(event))","    ","    model_id = \"amazon.titan-image-generator-v1\"","    ","    try:","        body = json.loads(event[\"body\"])","        prompt = body.get(\"prompt\")","        if not prompt:","            raise ValueError(\"Missing 'prompt' in request body\")","        ","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"58/titan{seed}.png\"","","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        logger.info(\"Invoking Bedrock model with request: %s\", json.dumps(native_request))","        response = bedrock_client.invoke_model(  # Correct variable usage","            modelId=model_id,","            body=json.dumps(native_request)","        )","","        logger.info(\"Bedrock response: %s\", response)","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        logger.info(\"Uploading image to S3 at %s\", s3_image_path)","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        logger.error(\"Error occurred: %s\", str(e), exc_info=True)","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"raaaah >:(\",","                \"error\": str(e)","            })","        }",""]}],[{"start":{"row":60,"column":28},"end":{"row":60,"column":40},"action":"remove","lines":["YIPPIEEEE :3"],"id":47}],[{"start":{"row":60,"column":28},"end":{"row":60,"column":29},"action":"insert","lines":["D"],"id":48},{"start":{"row":60,"column":29},"end":{"row":60,"column":30},"action":"insert","lines":["e"]},{"start":{"row":60,"column":30},"end":{"row":60,"column":31},"action":"insert","lines":["t"]}],[{"start":{"row":60,"column":31},"end":{"row":60,"column":32},"action":"insert","lines":[" "],"id":49},{"start":{"row":60,"column":32},"end":{"row":60,"column":33},"action":"insert","lines":["f"]},{"start":{"row":60,"column":33},"end":{"row":60,"column":34},"action":"insert","lines":["u"]},{"start":{"row":60,"column":34},"end":{"row":60,"column":35},"action":"insert","lines":["n"]},{"start":{"row":60,"column":35},"end":{"row":60,"column":36},"action":"insert","lines":["k"]},{"start":{"row":60,"column":36},"end":{"row":60,"column":37},"action":"insert","lines":["e"]},{"start":{"row":60,"column":37},"end":{"row":60,"column":38},"action":"insert","lines":["r"]}],[{"start":{"row":60,"column":38},"end":{"row":60,"column":39},"action":"insert","lines":[" "],"id":50}],[{"start":{"row":60,"column":38},"end":{"row":60,"column":39},"action":"remove","lines":[" "],"id":51}],[{"start":{"row":60,"column":38},"end":{"row":60,"column":39},"action":"insert","lines":["?"],"id":52}],[{"start":{"row":7,"column":2},"end":{"row":7,"column":15},"action":"remove","lines":["Setup logging"],"id":53},{"start":{"row":7,"column":1},"end":{"row":7,"column":2},"action":"remove","lines":[" "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":1},"action":"remove","lines":["#"]},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":42,"column":49},"end":{"row":42,"column":73},"action":"remove","lines":["# Correct variable usage"],"id":54}],[{"start":{"row":11,"column":75},"end":{"row":11,"column":100},"action":"remove","lines":["# Ensure consistency here"],"id":55}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":4,"column":9},"end":{"row":4,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1732191785408,"hash":"fbfdc370a038c4d197df0b4556bec65c0ac3bd47"}