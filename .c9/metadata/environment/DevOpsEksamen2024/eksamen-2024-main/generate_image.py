{"changed":true,"filter":false,"title":"generate_image.py","tooltip":"/DevOpsEksamen2024/eksamen-2024-main/generate_image.py","value":"import base64\nimport boto3\nimport json\nimport random\n\n# Set up the AWS clients\n\nbedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")\ns3_client = boto3.client(\"s3\")\n\n# Define the model ID and S3 bucket name (replace with your actual bucket name)\nmodel_id = \"amazon.titan-image-generator-v1\"\nbucket_name = \"pgr301-couch-explorers\"\n\n# Frank; Important; Change this prompt to something else before the presentation with the investors!\nprompt = \"Investors, with circus hats, giving money to developers with large smiles\"\n\nseed = random.randint(0, 2147483647)\ns3_image_path = f\"generated_images/titan_{seed}.png\"\n\nnative_request = {\n    \"taskType\": \"TEXT_IMAGE\",\n    \"textToImageParams\": {\"text\": prompt},\n    \"imageGenerationConfig\": {\n        \"numberOfImages\": 1,\n        \"quality\": \"standard\",\n        \"cfgScale\": 8.0,\n        \"height\": 1024,\n        \"width\": 1024,\n        \"seed\": seed,\n    }\n}\n\nresponse = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))\nmodel_response = json.loads(response[\"body\"].read())\n\n# Extract and decode the Base64 image data\nbase64_image_data = model_response[\"images\"][0]\nimage_data = base64.b64decode(base64_image_data)\n\n# Upload the decoded image data to S3\ns3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)","undoManager":{"mark":-2,"position":-1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":57,"column":9},"action":"remove","lines":["import base64","import boto3","import json","import random","import os","","","bucket = os.environ['BUCKET']","bedrockclient = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    model_id = \"amazon.titan-image-generator-v1\"","","    body = json.loads(event[\"body\"])","    prompt = body.get(\"prompt\")","    seed= random.randint(0,2147483647)","    s3_image_path = f\"58/titan{seed}.png\"","","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    try:","        response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"raaaah >:(\",","                \"error\": str(e)","            })","        }"],"id":12},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","import logging","","# Setup logging","logger = logging.getLogger()","logger.setLevel(logging.INFO)","","bucket = os.environ['BUCKET']","bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")  # Ensure consistency here","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    logger.info(\"Received event: %s\", json.dumps(event))","    ","    model_id = \"amazon.titan-image-generator-v1\"","    ","    try:","        body = json.loads(event[\"body\"])","        prompt = body.get(\"prompt\")","        if not prompt:","            raise ValueError(\"Missing 'prompt' in request body\")","        ","        seed = random.randint(0, 2147483647)","        s3_image_path = f\"58/titan{seed}.png\"","","        native_request = {","            \"taskType\": \"TEXT_IMAGE\",","            \"textToImageParams\": {\"text\": prompt},","            \"imageGenerationConfig\": {","                \"numberOfImages\": 1,","                \"quality\": \"standard\",","                \"cfgScale\": 8.0,","                \"height\": 1024,","                \"width\": 1024,","                \"seed\": seed,","            }","        }","","        logger.info(\"Invoking Bedrock model with request: %s\", json.dumps(native_request))","        response = bedrock_client.invoke_model(  # Correct variable usage","            modelId=model_id,","            body=json.dumps(native_request)","        )","","        logger.info(\"Bedrock response: %s\", response)","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        logger.info(\"Uploading image to S3 at %s\", s3_image_path)","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        logger.error(\"Error occurred: %s\", str(e), exc_info=True)","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"raaaah >:(\",","                \"error\": str(e)","            })","        }",""]}],[{"start":{"row":54,"column":37},"end":{"row":54,"column":38},"action":"insert","lines":["("],"id":12}],[{"start":{"row":54,"column":35},"end":{"row":54,"column":36},"action":"insert","lines":[">"],"id":13},{"start":{"row":54,"column":36},"end":{"row":54,"column":37},"action":"insert","lines":[":"]}],[{"start":{"row":54,"column":35},"end":{"row":54,"column":36},"action":"remove","lines":["<"],"id":14}],[{"start":{"row":54,"column":34},"end":{"row":54,"column":35},"action":"insert","lines":[" "],"id":15},{"start":{"row":54,"column":35},"end":{"row":54,"column":36},"action":"insert","lines":["<"]}],[{"start":{"row":54,"column":28},"end":{"row":54,"column":29},"action":"insert","lines":["r"],"id":16},{"start":{"row":54,"column":29},"end":{"row":54,"column":30},"action":"insert","lines":["a"]},{"start":{"row":54,"column":30},"end":{"row":54,"column":31},"action":"insert","lines":["a"]},{"start":{"row":54,"column":31},"end":{"row":54,"column":32},"action":"insert","lines":["a"]},{"start":{"row":54,"column":32},"end":{"row":54,"column":33},"action":"insert","lines":["a"]},{"start":{"row":54,"column":33},"end":{"row":54,"column":34},"action":"insert","lines":["h"]}],[{"start":{"row":54,"column":28},"end":{"row":54,"column":44},"action":"remove","lines":["lol you suck :3 "],"id":17}],[{"start":{"row":17,"column":22},"end":{"row":17,"column":23},"action":"insert","lines":["5"],"id":18},{"start":{"row":17,"column":23},"end":{"row":17,"column":24},"action":"insert","lines":["8"]}],[{"start":{"row":17,"column":22},"end":{"row":17,"column":23},"action":"remove","lines":["4"],"id":19}],[{"start":{"row":0,"column":0},"end":{"row":41,"column":76},"action":"remove","lines":["import base64","import boto3","import json","import random","","# Set up the AWS clients","","bedrock_client = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","s3_client = boto3.client(\"s3\")","","# Define the model ID and S3 bucket name (replace with your actual bucket name)","model_id = \"amazon.titan-image-generator-v1\"","bucket_name = \"pgr301-couch-explorers\"","","# Frank; Important; Change this prompt to something else before the presentation with the investors!","prompt = \"Investors, with circus hats, giving money to developers with large smiles\"","","seed = random.randint(0, 2147483647)","s3_image_path = f\"generated_images/titan_{seed}.png\"","","native_request = {","    \"taskType\": \"TEXT_IMAGE\",","    \"textToImageParams\": {\"text\": prompt},","    \"imageGenerationConfig\": {","        \"numberOfImages\": 1,","        \"quality\": \"standard\",","        \"cfgScale\": 8.0,","        \"height\": 1024,","        \"width\": 1024,","        \"seed\": seed,","    }","}","","response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","model_response = json.loads(response[\"body\"].read())","","# Extract and decode the Base64 image data","base64_image_data = model_response[\"images\"][0]","image_data = base64.b64decode(base64_image_data)","","# Upload the decoded image data to S3","s3_client.put_object(Bucket=bucket_name, Key=s3_image_path, Body=image_data)"],"id":20},{"start":{"row":0,"column":0},"end":{"row":57,"column":9},"action":"insert","lines":["import base64","import boto3","import json","import random","import os","","","bucket = os.environ['BUCKET']","bedrockclient = boto3.client(\"bedrock-runtime\", region_name=\"us-east-1\")","s3_client = boto3.client(\"s3\")","","def lambda_handler(event, context):","    model_id = \"amazon.titan-image-generator-v1\"","","    body = json.loads(event[\"body\"])","    prompt = body.get(\"prompt\")","    seed= random.randint(0,2147483647)","    s3_image_path = f\"4/titan{seed}.png\"","","","    native_request = {","        \"taskType\": \"TEXT_IMAGE\",","        \"textToImageParams\": {\"text\": prompt},","        \"imageGenerationConfig\": {","            \"numberOfImages\": 1,","            \"quality\": \"standard\",","            \"cfgScale\": 8.0,","            \"height\": 1024,","            \"width\": 1024,","            \"seed\": seed,","        }","    }","","    try:","        response = bedrock_client.invoke_model(modelId=model_id, body=json.dumps(native_request))","        model_response = json.loads(response[\"body\"].read())","","        base64_image_data = model_response[\"images\"][0]","        image_data = base64.b64decode(base64_image_data)","","        s3_client.put_object(Bucket=bucket, Key=s3_image_path, Body=image_data)","        return {","            \"statusCode\": 200,","            \"body\": json.dumps({","                \"message\": \"YIPPIEEEE :3\",","                \"s3_image_path\": f\"s3://{bucket}/{s3_image_path}\",","                \"prompt\": prompt","            })","        }","","    except Exception as e:","        return {","            \"statusCode\": 500,","            \"body\": json.dumps({","                \"message\": \"lol you suck :3 \",","                \"error\": str(e)","            })","        }"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":4,"column":0},"end":{"row":4,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1732128800633}